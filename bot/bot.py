import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import BOT_TOKEN, EVENT_DATE, ADMIN_IDS
from database import init_db, add_participant, get_participant_count, get_all_participants, mark_reminder_sent, broadcast_message
from scheduler import setup_scheduler
import json

# –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ
WELCOME_PHOTO_PATH = "media/Image-2.jpg"

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
with open("messages.json", "r", encoding="utf-8") as f:
    MESSAGES = json.load(f)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", request_contact=True)]
], resize_keyboard=True)


# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class RegistrationStates(StatesGroup):
    waiting_for_username = State()  # ‚Üê –¢–∞–∫ –Ω—É–∂–Ω–æ –æ–±—ä—è–≤–ª—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
@dp.message(Command("start"))
async def cmd_start(message: Message):
    photo = FSInputFile(WELCOME_PHOTO_PATH)
    caption = """\
üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ ¬´–ë–µ–≥, –ö–æ—Ñ–µ, –¢–∞–Ω—Ü—ã¬ª!**  

üåû –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±–µ–∂–∫–∞ –∏–ª–∏ –∫–æ—Ñ–µ —Å –¥—Ä—É–∑—å—è–º–∏ ‚Äî —ç—Ç–æ –∑–∞—Ä—è–¥–∫–∞ –¥–ª—è —Ç–µ–ª–∞, –¥—É—à–∏ –∏ –º–æ–∑–≥–∞ üí°  
–•–æ—á–µ—à—å —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–∏—Ç—É–∞–ª–∞? –ù–∞—á–Ω—ë–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚ú®  

üëá –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ + –Ω–∏–∫ –≤ Telegram.
"""
    await message.answer_photo(
        photo=photo,
        caption=caption,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@dp.message(F.contact)
async def handle_contact(message: Message, state: FSMContext):
    user_id = message.from_user.id
    contact = message.contact
    phone = contact.phone_number
    username = message.from_user.username or ""

    if not username:
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è username
        await state.set_state(RegistrationStates.waiting_for_username)  # ‚Üê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(user_id=user_id, phone=phone)
        await message.answer(MESSAGES["no_username"])
        return

    await add_participant(user_id, username, phone)
    await message.answer(MESSAGES["registered"], reply_markup=None)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ username –≤—Ä—É—á–Ω—É—é
@dp.message(RegistrationStates.waiting_for_username)  # ‚Üê –¢–µ–ø–µ—Ä—å –∑–¥–µ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def process_username(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data["user_id"]
    phone = data["phone"]
    username = message.text.strip()

    if not username:
        await message.answer("–ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await add_participant(user_id, username, phone)
    await message.answer(MESSAGES["registered"], reply_markup=None)
    await state.clear()


# –ö–æ–º–∞–Ω–¥–∞ /list (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
@dp.message(Command("list"))
async def cmd_list(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    count = await get_participant_count()
    await message.answer(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}")


# –ö–æ–º–∞–Ω–¥–∞ /export (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
@dp.message(Command("export"))
async def cmd_export(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    rows = await get_all_participants()
    csv_path = "participants.csv"
    with open(csv_path, "w", encoding="utf-8") as f:
        f.write("ID,Telegram ID,Username,Phone,Registered\n")
        for r in rows:
            f.write(f"{r['id']},{r['telegram_user_id']},{r['username']},{r['phone_number']},{r['registration_time']}\n")
    await message.answer_document(FSInputFile(csv_path))


# –ö–æ–º–∞–Ω–¥–∞ /broadcast (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
@dp.message(Command("broadcast"))
async def cmd_broadcast(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    try:
        text = message.text.split(maxsplit=1)[1]
    except IndexError:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä: /broadcast –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    users = await broadcast_message()
    success = 0
    failed = 0

    for user in users:
        try:
            await bot.send_message(user["telegram_user_id"], text)
            success += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user['telegram_user_id']}: {e}")
            failed += 1
        await asyncio.sleep(0.05)

    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {failed}")


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    await init_db()
    setup_scheduler(bot)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())